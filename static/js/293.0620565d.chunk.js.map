{"version":3,"file":"static/js/293.0620565d.chunk.js","mappings":"kSACA,EAA4B,0BAA5B,EAAmE,2BAAnE,EAA8G,8BAA9G,EAA+J,iC,SC+D/J,EAxDe,WACb,OAA4BA,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,EAAQF,EAAaG,IAAI,UAK/BC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAU,mCAAG,8GAEIC,EAAAA,EAAAA,IAAaJ,GAFjB,OAETK,EAFS,OAGfT,GAAU,OAAIS,EAAKC,UAHJ,gDAKfC,QAAQC,IAAI,KAAMC,SALH,yDAAH,qDASF,KAAVT,GAGJG,GACD,GAAE,CAACH,IAYJ,OACE,iCACE,gBAAKU,UAAWC,EAAhB,UACE,SAAC,KAAD,CAAQC,cAjCQ,CACpBC,OAAQ,IAgCkCC,SAbvB,SAAC,EAAD,GAAgC,IAA7BD,EAA4B,EAA5BA,OAAYE,EAAgB,EAAhBA,UAClC,GAAsB,KAAlBF,EAAOG,OAGT,OAFAC,IAAAA,OAAAA,QAAwB,8BACxBF,IAGFhB,EAAgB,CAAEC,MAAOa,IACzBE,GACD,EAKK,UACE,UAAC,KAAD,CAAML,UAAWC,EAAjB,WACE,SAAC,KAAD,CACEO,KAAK,OACLC,KAAK,SACLT,UAAWC,EACXS,WAAS,KAEX,mBAAQF,KAAK,SAASR,UAAWC,EAAjC,4BAMN,SAACU,EAAA,EAAD,CAAYC,MAAO3B,MAGxB,ECpDD,EARmB,WACjB,OACE,+BACE,SAAC,EAAD,KAGL,C,2ECPD,EAAuB,yBAAvB,EAAuD,yBAAvD,EAAuF,yBAAvF,EAAyH,2B,SC2BzH,EAxBmB,SAAC,GAAe,IAAb2B,EAAY,EAAZA,MACdC,GAAWC,EAAAA,EAAAA,MAEXC,EAAWH,EAAMI,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,YAAd,OACzB,eAAInB,UAAWC,EAAf,UACE,UAAC,KAAD,CACED,UAAWC,EACXmB,GAAE,kBAAaH,GACfI,MAAO,CAAEC,KAAMT,GAHjB,UAKGM,IACC,gBACEI,IAAG,0CAAqCJ,GACxCnB,UAAWC,EACXuB,IAAI,MAGR,uBAAIN,QAbsBD,EADL,IAkB3B,OAAO,eAAIjB,UAAWC,EAAf,SAA0Bc,GAClC,C,sLCxBKU,E,OAAUC,EAAAA,OAAa,CAC3BC,QAAS,gCACTC,OAAQ,CACNC,QAAS,mCACTC,SAAU,WAIDpC,EAAY,mCAAG,WAAMJ,GAAN,yFACHmC,EAAQlC,IAAI,eAAgB,CACjDqC,OAAQ,CACNtC,MAAAA,KAHsB,uBAClBK,EADkB,EAClBA,KADkB,kBAMnBA,GANmB,2CAAH,sDASZoC,EAAgB,mCAAG,sGACPN,EAAQlC,IAAI,iBADL,uBACtBI,EADsB,EACtBA,KADsB,kBAEvBA,GAFuB,2CAAH,qDAKhBqC,EAAY,mCAAG,WAAMf,GAAN,yFACHQ,EAAQlC,IAAR,gBAAqB0B,IADlB,uBAClBtB,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZsC,EAAU,mCAAG,WAAMhB,GAAN,yFACDQ,EAAQlC,IAAR,iBAAsB0B,EAAtB,aADC,uBAChBtB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,sDAKVuC,EAAU,mCAAG,WAAMjB,GAAN,yFACDQ,EAAQlC,IAAR,iBAAsB0B,EAAtB,aADC,uBAChBtB,EADgB,EAChBA,KADgB,kBAEjBA,GAFiB,2CAAH,qD","sources":["webpack://goit-react-hw-05-movies/./src/modules/Movies/Movies.module.css?cafb","modules/Movies/Movies.jsx","pages/MoviesPage.jsx","webpack://goit-react-hw-05-movies/./src/shared/components/MovieItems/MovieItems.module.css?5539","shared/components/MovieItems/MovieItems.jsx","shared/services/API.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"Searchbar\":\"Movies_Searchbar__TJREf\",\"SearchForm\":\"Movies_SearchForm__qApC0\",\"SearchFormBtn\":\"Movies_SearchFormBtn__pKTEA\",\"SearchFormIinput\":\"Movies_SearchFormIinput__mOMFN\"};","import { Formik, Form, Field } from 'formik';\nimport Notiflix from 'notiflix';\nimport { useState, useEffect } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport MovieItems from '../../shared/components/MovieItems/MovieItems';\nimport { searchMovies } from '../../shared/services/API';\nimport css from './Movies.module.css';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const query = searchParams.get('query');\n  const initialValues = {\n    search: '',\n  };\n\n  useEffect(() => {\n    const fetchMovie = async () => {\n      try {\n        const data = await searchMovies(query);\n        setMovies([...data.results]);\n      } catch (error) {\n        console.log(error.message);\n      }\n    };\n\n    if (query === '') {\n      return;\n    }\n    fetchMovie();\n  }, [query]);\n\n  const handleSubmit = ({ search }, { resetForm }) => {\n    if (search.trim() === '') {\n      Notiflix.Notify.failure('Please enter a search');\n      resetForm();\n      return;\n    }\n    setSearchParams({ query: search });\n    resetForm();\n  };\n\n  return (\n    <>\n      <div className={css.Searchbar}>\n        <Formik initialValues={initialValues} onSubmit={handleSubmit}>\n          <Form className={css.SearchForm}>\n            <Field\n              type=\"text\"\n              name=\"search\"\n              className={css.SearchFormIinput}\n              autoFocus\n            ></Field>\n            <button type=\"submit\" className={css.SearchFormBtn}>\n              Search\n            </button>\n          </Form>\n        </Formik>\n      </div>\n      <MovieItems items={movies} />\n    </>\n  );\n};\n\nexport default Movies;\n","import Movies from '../modules/Movies/Movies';\n\nconst MoviesPage = () => {\n  return (\n    <>\n      <Movies />\n    </>\n  );\n};\n\nexport default MoviesPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"MovieItems_list__A4QYA\",\"item\":\"MovieItems_item__dFkha\",\"link\":\"MovieItems_link__1paVd\",\"poster\":\"MovieItems_poster__BC4J4\"};","import { Link, useLocation } from 'react-router-dom';\nimport PropTypes from 'prop-types';\nimport css from './MovieItems.module.css';\n\nconst MovieItems = ({ items }) => {\n  const location = useLocation();\n\n  const elements = items.map(({ id, title, poster_path }) => (\n    <li className={css.item} key={id}>\n      <Link\n        className={css.link}\n        to={`/movies/${id}`}\n        state={{ from: location }}\n      >\n        {poster_path && (\n          <img\n            src={`https://image.tmdb.org/t/p/w500/${poster_path}`}\n            className={css.poster}\n            alt=\"\"\n          ></img>\n        )}\n        <p>{title}</p>\n      </Link>\n    </li>\n  ));\n  return <ul className={css.list}>{elements}</ul>;\n};\n\nexport default MovieItems;\n\nMovieItems.propTypes = {\n  items: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.number,\n      title: PropTypes.string,\n      poster_path: PropTypes.string,\n    })\n  ).isRequired,\n};\n","import axios from 'axios';\n\nconst instans = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: '15b081f5b9030a29148fdb73ac896fef',\n    language: 'en-US',\n  },\n});\n\nexport const searchMovies = async query => {\n  const { data } = await instans.get('search/movie', {\n    params: {\n      query,\n    },\n  });\n  return data;\n};\n\nexport const getPopularMovies = async () => {\n  const { data } = await instans.get('movie/popular');\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instans.get(`movie/${id}`);\n  return data;\n};\n\nexport const getCredits = async id => {\n  const { data } = await instans.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getReviews = async id => {\n  const { data } = await instans.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["useState","movies","setMovies","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchMovie","searchMovies","data","results","console","log","message","className","css","initialValues","search","onSubmit","resetForm","trim","Notiflix","type","name","autoFocus","MovieItems","items","location","useLocation","elements","map","id","title","poster_path","to","state","from","src","alt","instans","axios","baseURL","params","api_key","language","getPopularMovies","getMovieById","getCredits","getReviews"],"sourceRoot":""}